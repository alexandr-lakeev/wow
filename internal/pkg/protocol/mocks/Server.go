// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

type Server_Expecter struct {
	mock *mock.Mock
}

func (_m *Server) EXPECT() *Server_Expecter {
	return &Server_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, conn
func (_m *Server) Handle(ctx context.Context, conn io.ReadWriter) error {
	ret := _m.Called(ctx, conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.ReadWriter) error); ok {
		r0 = rf(ctx, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Server_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - conn io.ReadWriter
func (_e *Server_Expecter) Handle(ctx interface{}, conn interface{}) *Server_Handle_Call {
	return &Server_Handle_Call{Call: _e.mock.On("Handle", ctx, conn)}
}

func (_c *Server_Handle_Call) Run(run func(ctx context.Context, conn io.ReadWriter)) *Server_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.ReadWriter))
	})
	return _c
}

func (_c *Server_Handle_Call) Return(_a0 error) *Server_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Handle_Call) RunAndReturn(run func(context.Context, io.ReadWriter) error) *Server_Handle_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServer(t mockConstructorTestingTNewServer) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

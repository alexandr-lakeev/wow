// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hasher is an autogenerated mock type for the Hasher type
type Hasher struct {
	mock.Mock
}

type Hasher_Expecter struct {
	mock *mock.Mock
}

func (_m *Hasher) EXPECT() *Hasher_Expecter {
	return &Hasher_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields: _a0
func (_m *Hasher) Hash(_a0 []byte) []byte {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Hasher_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type Hasher_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Hasher_Expecter) Hash(_a0 interface{}) *Hasher_Hash_Call {
	return &Hasher_Hash_Call{Call: _e.mock.On("Hash", _a0)}
}

func (_c *Hasher_Hash_Call) Run(run func(_a0 []byte)) *Hasher_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Hasher_Hash_Call) Return(_a0 []byte) *Hasher_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hasher_Hash_Call) RunAndReturn(run func([]byte) []byte) *Hasher_Hash_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHasher interface {
	mock.TestingT
	Cleanup(func())
}

// NewHasher creates a new instance of Hasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHasher(t mockConstructorTestingTNewHasher) *Hasher {
	mock := &Hasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

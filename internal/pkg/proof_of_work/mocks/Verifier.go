// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/alexandr-lakeev/wow/internal/pkg/proof_of_work/dto"
	mock "github.com/stretchr/testify/mock"
)

// Verifier is an autogenerated mock type for the Verifier type
type Verifier struct {
	mock.Mock
}

type Verifier_Expecter struct {
	mock *mock.Mock
}

func (_m *Verifier) EXPECT() *Verifier_Expecter {
	return &Verifier_Expecter{mock: &_m.Mock}
}

// GetChallenge provides a mock function with given fields: resource
func (_m *Verifier) GetChallenge(resource string) *dto.Challenge {
	ret := _m.Called(resource)

	var r0 *dto.Challenge
	if rf, ok := ret.Get(0).(func(string) *dto.Challenge); ok {
		r0 = rf(resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Challenge)
		}
	}

	return r0
}

// Verifier_GetChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChallenge'
type Verifier_GetChallenge_Call struct {
	*mock.Call
}

// GetChallenge is a helper method to define mock.On call
//   - resource string
func (_e *Verifier_Expecter) GetChallenge(resource interface{}) *Verifier_GetChallenge_Call {
	return &Verifier_GetChallenge_Call{Call: _e.mock.On("GetChallenge", resource)}
}

func (_c *Verifier_GetChallenge_Call) Run(run func(resource string)) *Verifier_GetChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Verifier_GetChallenge_Call) Return(_a0 *dto.Challenge) *Verifier_GetChallenge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_GetChallenge_Call) RunAndReturn(run func(string) *dto.Challenge) *Verifier_GetChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: challenge
func (_m *Verifier) Verify(challenge *dto.Challenge) bool {
	ret := _m.Called(challenge)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*dto.Challenge) bool); ok {
		r0 = rf(challenge)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Verifier_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type Verifier_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - challenge *dto.Challenge
func (_e *Verifier_Expecter) Verify(challenge interface{}) *Verifier_Verify_Call {
	return &Verifier_Verify_Call{Call: _e.mock.On("Verify", challenge)}
}

func (_c *Verifier_Verify_Call) Run(run func(challenge *dto.Challenge)) *Verifier_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.Challenge))
	})
	return _c
}

func (_c *Verifier_Verify_Call) Return(_a0 bool) *Verifier_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_Verify_Call) RunAndReturn(run func(*dto.Challenge) bool) *Verifier_Verify_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewVerifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewVerifier creates a new instance of Verifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVerifier(t mockConstructorTestingTNewVerifier) *Verifier {
	mock := &Verifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
